package de.fayard.refreshVersions.core.internal.versions

import de.fayard.refreshVersions.core.internal.availableComment
import de.fayard.refreshVersions.core.internal.versions.VersionsPropertiesModel.Section.Comment
import de.fayard.refreshVersions.core.internal.versions.VersionsPropertiesModel.Section.VersionEntry

private val versionsPropertiesHeader = """
### Don't manually edit or split the comments that start with three hashtags (###),
### they will be overwritten by refreshVersions.
###
### suppress inspection "SpellCheckingInspection" for whole file
### suppress inspection "UnusedProperty" for whole file
###
### Dependencies and Plugin versions with their available updates
### Generated by ${'$'} ./gradlew refreshVersions
""".trimMargin()

internal fun VersionsPropertiesModel.toText(): CharSequence = buildString {
    appendln(preHeaderContent)
    appendln(versionsPropertiesHeader)
    appendln("### Generated by refreshVersions $generatedByVersion")
    appendln()
    val sb = StringBuilder()
    sections.joinTo(buffer = this, separator = "\n\n") { it.toText(sb) }
}

private fun VersionsPropertiesModel.Section.toText(
    builder: StringBuilder
): CharSequence = when (this) {
    is Comment -> lines
    is VersionEntry -> builder.apply {
        clear()
        leadingCommentLines.forEach { appendln(it) }
        metadataCommentLines.forEach { appendln(it) }

        val paddedKey = key.padStart(availableComment.length + 2)
        val currentVersionLine = "$paddedKey=$currentVersion"
        appendln(currentVersionLine)
        availableUpdates.forEach { versionCandidate ->
            append("##"); append(availableComment.padStart(key.length - 2))
            append('='); appendln(versionCandidate)
        }

        trailingCommentLines.forEach { appendln(it) }
    }
}
