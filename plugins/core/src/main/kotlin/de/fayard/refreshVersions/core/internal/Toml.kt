package de.fayard.refreshVersions.core.internal

import de.fayard.refreshVersions.core.ModuleId
import org.gradle.api.artifacts.Dependency

@InternalRefreshVersionsApi
object Toml {

    fun parseTomlInSection(toml: String): Map<String, String> {
        val result = mutableMapOf<String, StringBuilder>()
        result["root"] = StringBuilder()
        var current: StringBuilder = result["root"]!!
        val lines = toml.lines()
        for ((index, line) in lines.withIndex()) {
            val trimmed = line.trim()
            val isSectionHeader = trimmed.startsWith("[") && trimmed.endsWith("]")
            if (isSectionHeader) {
                val sectionName = trimmed.removePrefix("[").removeSuffix("]")
                result[sectionName] = StringBuilder()
                current = result[sectionName]!!
            } else {
                current.append(line)
                if (index != lines.lastIndex) current.append("\n")
            }
        }
        return result.mapValues { it.value.toString() }
    }

    fun tomlSectionsToString(sections: Map<String, String>): String = buildString {
        for ((header, content) in sections) {
            if (header != "root") append("\n[$header]\n\n")
            append(content.trim())
            append("\n")
        }
    }

    fun versionsCatalog(deps: Deps, currentText: String, withVersions: Boolean, plugins: List<Dependency>): String {
        val sections = parseTomlInSection(currentText).toMutableMap()
        if (sections["root"].isNullOrBlank()) {
            sections["root"] = "## Generated by $ ./gradlew refreshVersionsCatalog\n\n"
        }
        sections["plugins"] = addPlugins(plugins).toText()
        sections["libraries"] = versionsCatalogLibraries(deps, withVersions).toText()
        return tomlSectionsToString(sections)
    }

    private fun addPlugins(plugins: List<Dependency>): List<TomlLine> =
        plugins
            .distinctBy { d -> "${d.group}:${d.name}" }
            .map { d ->
                val pluginId = d.name.removeSuffix(".gradle.plugin")
                val map = mapOf(
                    "id" to pluginId,
                    "version" to (d.version ?: "_")
                )
                TomlLine(TomlLine.Section.plugins, pluginId.replace(".", "-"), map)

            }.flatMap {
                listOf(TomlLine.newLine, it)
            }

    private fun versionsCatalogLibraries(deps: Deps, withVersions: Boolean): List<TomlLine> {
        val versionsMap = RefreshVersionsConfigHolder.readVersionsMap()
        val versionKeyReader: ArtifactVersionKeyReader = RefreshVersionsConfigHolder.versionKeyReader

        return deps.libraries.flatMap { lib ->
            val versionKey = getVersionPropertyName(ModuleId.Maven(lib.group, lib.name), versionKeyReader)
            val version = versionsMap[versionKey] ?: "_"

            val value = lib.groupModule() + ":" + if (withVersions) version else "_"
            listOf(
                TomlLine.newLine,
                TomlLine(TomlLine.Section.libraries, deps.names[lib]!!, value)
            )
        }
    }
}
