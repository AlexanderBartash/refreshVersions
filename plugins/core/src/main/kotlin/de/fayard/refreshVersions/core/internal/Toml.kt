package de.fayard.refreshVersions.core.internal

import de.fayard.refreshVersions.core.ModuleId

@InternalRefreshVersionsApi
object Toml {

    fun parseTomlInSection(toml: String): Map<String, String> {
        val result = mutableMapOf<String, StringBuilder>()
        result["root"] = StringBuilder()
        var current: StringBuilder = result["root"]!!
        val lines = toml.lines()
        for ((index, line) in lines.withIndex()) {
            val trimmed = line.trim()
            val isSectionHeader = trimmed.startsWith("[") && trimmed.endsWith("]")
            if (isSectionHeader) {
                val sectionName = trimmed.removePrefix("[").removeSuffix("]")
                result[sectionName] = StringBuilder()
                current = result[sectionName]!!
            } else {
                current.append(line)
                if (index != lines.lastIndex) current.append("\n")
            }
        }
        return result.mapValues { it.value.toString() }
    }

    fun tomlSectionsToString(sections: Map<String, String>): String = buildString {
        for ((header, content) in sections) {
            if (header != "root") append("[$header]\n")
            append(content)
        }
    }

    fun versionsCatalog(deps: Deps, currentText: String, withVersions: Boolean): String {
        val sections = parseTomlInSection(currentText).toMutableMap()
        if (sections["root"].isNullOrBlank()) {
            sections["root"] = "## Generated by $ ./gradlew refreshVersionsCatalog\n\n"
        }
        sections["libraries"] = versionsCatalogLibraries(deps, withVersions)
        return tomlSectionsToString(sections)
    }

    fun versionsCatalogLibraries(deps: Deps, withVersions: Boolean) = buildString {
        val versionsMap = RefreshVersionsConfigHolder.readVersionsMap()
        val versionKeyReader: ArtifactVersionKeyReader = RefreshVersionsConfigHolder.versionKeyReader

        append('\n')
        deps.libraries.forEach { lib ->
            val versionKey = getVersionPropertyName(ModuleId.Maven(lib.group, lib.name), versionKeyReader)
            val version = versionsMap[versionKey] ?: "_"

            append(deps.names[lib])
            append(" = \"")
            append(lib.groupModule() + ":" + if (withVersions) version else "_")
            append('"')
            append("\n")
            append("\n")
        }
        append("\n")
    }
}
