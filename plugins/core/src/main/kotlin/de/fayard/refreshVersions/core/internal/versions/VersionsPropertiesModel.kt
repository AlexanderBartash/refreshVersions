package de.fayard.refreshVersions.core.internal.versions

internal data class VersionsPropertiesModel(
    val preHeaderContent: String,
    val generatedByVersion: String,
    val sections: List<Section>
) {
    sealed class Section {

        data class Comment(val lines: String) : Section()

        data class VersionEntry(
            val leadingCommentLines: List<String>,
            val key: String,
            val currentVersion: String,
            val availableUpdates: List<String>,
            val trailingCommentLines: List<String>
        ) : Section() {
            val metadataLines: List<String> by lazy {
                leadingCommentLines.mapNotNull {
                    it.substringAfter("## ", missingDelimiterValue = "").ifEmpty { null }
                }
            }
        }
    }

    companion object {

        /**
         * We use 4 hashtags to simplify parsing as we can have up to 3 contiguous hashtags in the
         * version availability comments
         * (and just 2 are needed for metadata comments and only 1 for user comments).
         */
        const val headerLinesPrefix = "####"
        const val generatedByLineStart = "#### Generated by `./gradlew refreshVersions` version "

        const val availableComment = "# available"

        val versionKeysPrefixes = listOf("plugin", "version")

        fun versionsPropertiesHeader(version: String) = """
            |#### Dependencies and Plugin versions with their available updates.
            |$generatedByLineStart$version
            |####
            |#### Don't manually edit or split the comments that start with four hashtags (####),
            |#### they will be overwritten by refreshVersions.
            |####
            |#### suppress inspection "SpellCheckingInspection" for whole file
            |#### suppress inspection "UnusedProperty" for whole file
            """.trimMargin().also { headerText ->
            assert(headerText.lineSequence().all { it.startsWith(headerLinesPrefix) })
        }
    }
}
